
이러한 요구사항을 충족하는 Visual Studio Code 확장 프로그램을 만들기 위해서는 여러가지 작업이 필요합니다. 아래는 전반적인 프로세스에 대한 개요입니다. 이 프로세스를 참고로 하여 구체적인 상황에 맞게 코드를 작성해 나가면 됩니다.

0. 사전조사:
*     package.json을 통해 aws 배포가 가능하다는 방법을 한번 알아보기.(X 이건 node.js 프로젝트일 때만 가능. 우린 JAVA 프로젝트이므로 사용 불가)
1. 초기 환경 설정:
* 		Extension 프로젝트 생성: Visual Studio Code Extension 프로젝트를 생성합니다.
* 		프로젝트 구조 정의: Extension의 파일 및 폴더 구조를 정의합니다.
2. 사용자 인터페이스(GUI) 구성:
* 		사용자 인터페이스 디자인: GUI를 위한 HTML 및 CSS 파일을 생성하고 디자인합니다.
* 		VSCode API 사용: VSCode API를 사용하여 확장의 메뉴, 버튼 등의 UI 구성 요소를 추가합니다.
* 		이벤트 핸들링: UI에서 발생하는 이벤트에 대한 핸들러를 구현합니다.
3. FTP 클라이언트 통합:
* 		FTP 클라이언트 라이브러리 추가: 선택한 FTP 클라이언트 라이브러리를 프로젝트에 추가합니다.
* 		FTP 연결 및 파일 전송 구현: FTP 클라이언트를 사용하여 선택한 서버에 파일을 전송하는 기능을 구현합니다.
4. 파일 컴파일:
* 		컴파일러 설정: 선택한 프로그래밍 언어에 맞는 컴파일러를 프로젝트에 추가합니다.
* 		컴파일 기능 구현: 사용자가 선택한 파일이나 프로젝트를 컴파일하는 기능을 추가합니다.
5. 서버 선택 및 배포:
* 		서버 목록 설정: 사용자가 배포할 서버를 등록하고 목록으로 관리할 수 있는 기능을 추가합니다.
* 		서버 선택 및 배포 기능 구현: 사용자가 선택한 서버에 파일을 배포하는 기능을 구현합니다.
6. 성능 집계 및 표시:
* 		성능 측정 코드 추가: 프로그램의 실행 시간을 측정하는 코드를 추가합니다.
* 		효율성 표시 구현: 배포 작업의 효율성을 표시하는 UI를 구현하고 측정된 성능 정보를 표시합니다.
7. 테스트 및 디버깅:
* 		단위 테스트 작성: 각 기능에 대한 단위 테스트를 작성하여 확장의 안정성을 보장합니다.
* 		디버깅 지원 추가: 사용자가 확장을 디버깅할 수 있도록 필요한 설정을 추가합니다.
8. 문서화:
* 		사용 설명서 작성: 사용자를 위한 간단하고 명확한 사용 설명서를 작성합니다.
* 		코드 주석 및 문서화: 코드 내에 주석을 추가하고, 필요에 따라 자세한 문서를 작성하여 협업을 용이하게 합니다.
참고사항:
* VSCode API 문서 확인: VSCode API 문서를 자주 확인하여 필요한 API 및 기능을 활용하세요.
* 확장 개발 템플릿 사용: VSCode에서는 확장 개발을 위한 템플릿을 제공합니다. 이를 사용하여 초기 구성을 빠르게 할 수 있습니다.
위의 단계들을 참고하여 진행하면서, 특히 FTP 클라이언트 통합과 서버 배포 관련 부분에서는 해당 언어와 프레임워크에 맞는 라이브러리 및 도구를 적절히 활용해야 합니다.




Amazon Elastic Compute Cloud(EC2)는 Amazon Web Services(AWS)의 클라우드 컴퓨팅 서비스 중 하나입니다. EC2는 가상 서버(인스턴스)를 프로비저닝하고 실행할 수 있는 확장 가능한 컴퓨팅 리소스를 제공합니다. 사용자는 EC2를 통해 필요에 따라 가상 서버를 생성하고 관리할 수 있습니다.
EC2의 주요 특징 및 기능은 다음과 같습니다

인스턴스 유형: 다양한 유형의 가상 서버(인스턴스)를 제공하며, 각 유형은 특정 리소스(인스턴스 유형, CPU, 메모리, 스토리지 등)를 갖습니다.
가상화: EC2는 가상화 기술을 사용하여 여러 사용자가 하나의 물리적 서버를 공유하면서 독립적인 환경을 제공합니다.
스케일링: 필요에 따라 인스턴스를 쉽게 확장하거나 축소할 수 있습니다. 이는 수요의 변화에 유연하게 대응할 수 있도록 합니다.
AMI(Amazon Machine Image): 인스턴스를 시작할 때 사용하는 이미지로, 운영 체제, 애플리케이션 및 구성을 포함합니다.
EBS(Elastic Block Store): 지속적인 블록 스토리지를 제공하며, EC2 인스턴스에 연결하여 데이터를 저장하고 가져올 수 있습니다.
보안 그룹 및 네트워킹: 보안 그룹을 통해 인스턴스에 대한 방화벽 규칙을 설정하고, 가상 네트워크를 통해 인스턴스 간 통신이 가능합니다.
오토 스케일링(Auto Scaling): 트래픽이나 부하에 따라 인스턴스의 수를 동적으로 조절하여 안정적인 성능을 유지합니다.
리전 및 가용 영역: AWS는 전 세계에 여러 리전과 가용 영역을 제공하며, 사용자는 원하는 지역에 인스턴스를 배치할 수 있습니다.
EC2를 사용하면 사용자는 물리적 하드웨어를 구매하거나 관리할 필요없이 클라우드에서 가상의 컴퓨팅 리소스를 쉽게 확보할 수 있습니다. 이는 유연성과 확장성을 제공하며, 서비스를 효율적으로 운영할 수 있도록 도와줍니다.


참고 블로그
https://velog.io/@makemyway-kr/Visual-Code%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-EC2%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0 

Host (호스트): 이는 원격 서버의 주소, 즉 EC2 인스턴스의 IP 주소를 나타냅니다.
Username (사용자 이름): SSH로 서버에 접속할 때 사용되는 사용자 이름입니다. 예를 들어, Ubuntu AMI의 경우 "ubuntu"가 일반적으로 사용됩니다.
Port (포트): SSH는 기본적으로 22번 포트를 사용합니다. 이는 원격 서버와 통신하는데 사용되는 포트 번호입니다.
Path (경로): 원격 서버 내에서 작업할 디렉토리의 위치를 나타냅니다. SSH로 원격 서버에 접속한 후에 작업할 위치를 설정하는데 사용됩니다.
Private Key (개인 키): SSH 접속 시 사용자를 인증하기 위한 키 파일입니다. EC2 인스턴스를 생성할 때 받은 .pem 파일이 여기에 해당합니다. 이 개인 키를 사용하여 SSH 접속 시 서버가 사용자를 식별하고 인증합니다.
이러한 용어들은 기본적으로 원격 서버에 접속하고, 서버에서 파일을 전송하거나 작업을 수행하는 등의 과정에서 사용됩니다. 이를 이해하려면 다음과 같은 주제들을 학습하는 것이 도움이 될 수 있습니다:
SSH 및 명령어 사용: SSH에 대한 기본적인 이해와 명령어 사용법을 익히세요. 원격 서버에 접속하고 파일을 전송하는 등의 작업을 수행하는 방법을 익히는 것이 중요합니다.
리눅스 기본 명령어: 리눅스 서버에서의 기본적인 명령어 사용법을 익히세요. 디렉토리 이동, 파일 복사, 파일 이동 등을 할 수 있어야 합니다.
SSH 키 및 인증: SSH 키의 생성, 관리, 사용에 대한 이해가 필요합니다. 개인 키와 공개 키를 생성하고, 서버에 공개 키를 등록하는 방법을 익히세요.
원격 서버 환경 설정: EC2 인스턴스를 생성하고, 필요한 프로그램을 설치하며, 서버의 환경을 설정하는 방법을 학습하세요.
이러한 기본적인 지식을 토대로 원격 서버에 접속하고 작업하는 경험을 쌓아나가면서, 위에서 언급한 내용들이 점점 익숙해질 것입니다. 학습에는 시간이 소요되지만, 단계적으로 익숙해지며 활용할 수 있게 될 것입니다.

AWS CLI가 가능하면 로컬 컴퓨터에서 바로 AWS S3에 업로드할 수 있도록 Access key ID와 Secret access key로 로그인해야한다. aws configure --profile 사용자 ID 로 AWS 이걸로 한번만 로그인하면 된다. 사용자 ID는 AWS IAM에서 생성한 ID이다.
(AWS에 접속해서 외부에서 접근하기 위한 IAM에서 권한을 부여하면 관리 > 엑세스 관리 > 사용자 > 보안 자격 증명 > 엑세스 키 만들기 를 눌러서 Access Key ID와 Secret access key 가 발행되는데 Secret access key이건 특히 잘 보관해둔다. '마지막으로 사용한 리전'도 잘 보관해둔다.)
이후 AWS Access Key ID [~] : 이걸 물어보면 AWS IAM에서 생성한 Access Key ID를 적고, AWS Secret Access Key [~] : 이걸 물어보면 Secret access key를 입력한다. Default region name을 물어보면 한국에 있는 리전(대부분은 ap-northeast-2 를 쓴다)을 입력하면 된다.
Default output format 은 보통 json이 기본적이므로 json을 적으면 된다.


**
아마존 웹 서비스(Amazon Web Services, AWS)는 클라우드 컴퓨팅 플랫폼으로, 다양한 IT 서비스를 온디맨드로 제공합니다. 클라우드 서버를 사용하는 것은 서버를 구입하거나 물리적으로 유지보수하는 대신, 인터넷을 통해 필요한 서버 및 IT 자원을 대여하는 개념입니다. 이를 통해 사용자는 자원을 효율적으로 관리하고 스케일링할 수 있습니다.

AWS를 사용하기 위한 주요 단계는 다음과 같습니다:

AWS 계정 생성:
AWS를 사용하려면 먼저 AWS 계정을 생성해야 합니다. AWS 웹 사이트에서 계정을 생성할 수 있습니다.

AWS 콘솔 로그인:
계정을 생성한 후에 AWS Management Console에 로그인합니다. 이것은 AWS 서비스를 관리하고 제어하는 웹 기반의 대시보드입니다.

EC2(탄력적 컴퓨팅 클라우드) 인스턴스 시작:
EC2는 가상 서버를 생성하고 관리하는 AWS 서비스입니다. AWS 콘솔에서 EC2 서비스로 이동하여 새로운 인스턴스를 시작합니다. 이 때, 다음과 같은 사항을 설정해야 합니다.

Amazon Machine Image (AMI): 원하는 운영 체제 및 소프트웨어 구성이 포함된 AMI를 선택합니다.
인스턴스 유형(Type): 인스턴스의 크기와 성능을 선택합니다.
보안 그룹(Security Group): 방화벽 설정을 지정하여 트래픽을 제어합니다.
키페어(Key Pair): 인스턴스에 연결하기 위한 SSH 키페어를 생성하거나 선택합니다. - EC2 생성시 발급됨.
인스턴스 연결:
인스턴스가 실행되면 SSH 또는 기타 원격 연결 도구를 사용하여 인스턴스에 연결할 수 있습니다.

인스턴스 사용 및 구성:
연결된 인스턴스에서 원하는 소프트웨어를 설치하고 설정합니다. 필요에 따라 데이터베이스, 웹 서버, 애플리케이션 서버 등을 구성할 수 있습니다.

비용 및 리소스 관리:
AWS는 사용한 만큼 비용이 발생합니다. AWS 비용 관리 도구를 사용하여 비용을 추적하고 필요에 따라 리소스를 확장 또는 축소합니다.

이러한 단계를 통해 AWS를 사용하여 클라우드 서버를 시작하고 관리할 수 있습니다. AWS는 다양한 서비스를 제공하므로 필요에 따라 다른 서비스도 탐험해보세요. AWS는 초보자부터 전문가까지 다양한 수준의 사용자를 지원하기 위한 다양한 자료와 자습서를 제공하고 있습니다.


참고 블로그
https://dschloe.github.io/aws/2023/09/vscode_aws_conn/
vscode에서 직접 EC2에 접속하도록 하는 방법으로 가려고 한다.




**
아마존 콘솔에서 EC2에서 컴퓨터를 만드는 방법을 알아보겠다.
(이고잉 EC2 수업을 나중에 따로 제작한다고 함)

맥(m1 apple), 윈도우, 리눅스 운영체제에서 접근하는 방법을 각각 설명해보겠다.

- 맥(m1 apple)

- 윈도우
1. 맥북에서 microsoft를 테스트 할 때.
microsoft remote desktop을 설치한다.
aws 웹페이지에서 EC2 인스턴스를 우클릭하여 연결 후, ec2-13...ap-northeast-2...ws.com.rdp 파일을 다운받아 위에 설치한 프로그램에 드래그한다.
암호는 aws1.pem(EC2 생성할 때 키체인으로 발급받았던 파일)를 인스턴스 연결 시 업로드하는 곳(인스턴스에 연결 > 암호 가져오기)에 업로드하여 사용한다.


- 리눅스
리눅스 알고있는게 없어서 리눅스 강의를 듣기로 한다.
생활코딩의 리눅스 강의를 보는중.
우선 웹에서 제공하는 리눅스 가상환경을 사용하기 위해 Codeonweb을 들어간다.

- 맥과 리눅스
맥은 리눅스는 아니지만 리눅스와 조상이 같기 때문에(unix) 리눅스를 따로 깔지 않더라도 리눅스처럼 사용할 수 있음.
그래서 mac으로도 충분히 리눅스 수텁을 들을 수 있음.



- 쉘
쉘 명령어


pwd (현재 위치한 경로 출력)
ls (현재 위치한 곳에 존재하는 디렉토리, 파일 등 출력)
cd 00(00디렉토리로 이동)
cd / (루트 디렉터리로 이동)
cd /폴더명 (루트 디렉터리의 해당 폴더로 이동. 파일도 가능. 절대 경로.)
cd ../ (..은 현재 디렉토리의 부모 디렉터리로 약속되어 있음. 상대적 경로. 내가 누구냐에 따라 부모가 달라지니까.이전 디렉토리로 이동)
echo $0(현재 쓰고 있는 쉘 프로그램을 알려주는 명령어)-EC2 리눅스에서는 bash, 맥북은 zsh 사용함
apt-get(linux에서 설치 툴)
Brew(Macos 에서 설치 툴)
ls -l (ls했을 때 보이는 파일혹은 폴더들의 자세한 내용을 보여준다.)
ls -a (숨김파일을 포함한 모든 파일을 보여줌. 유닉스, 리눅스에서는 파일이나 폴더 앞에 .이 붙어있으면 숨김파일 및 폴더.윈도우에서는 폴더나 파일이 숨김이라는 속성을 가지고 있음. 이것과는 차이가 있음. 일반 ls로는 조회되지 않음.)
ls -al (리눅스나 유닉스 기반 시스템에서 사용되는 명령어로, 현재 디렉터리의 파일 및 디렉터리 목록을 자세히 보여주는 명령어입니다. 각 파일 또는 디렉터리에 대한 다양한 정보를 포함하여 출력. 리스트형태로 깔끔하게 보여줌. 뒤에S붙이면 정렬되서 나옴)
lsb_release -a (대다수의 리눅스 배포판에서 어떤 배포판인지 알려주는 커맨드를 이걸로 지원함.)
cat /etc/os-release (위에꺼가 안되면 /etc 디렉터리에 있는 *-release 파일 중 하나를 확인하여 어떤 배포판인지 알아보는 방법으로 쓴다)
touch empty_file.txt(touch는 원래 다른 의미로 쓰이는 명령어이지만, touch쓰고 파일명을 쓰면 비어있는 파일 하나를 만들 수 있음.)
clear (터미널 클리어)
mkdir (디렉터리 생성 -f 다중 생성)
rm 파일명 (파일 지워짐)
rm -r (디렉토리 지워짐)
rm --help (linux에서 rm의 명령어가 뭐뭐 있는지 보기)
rm -d, rm --dir (빈 디렉토리 삭제)
rm -r(반복적, 재귀적으로 삭제, 디렉토리를 지울땐 이렇게 지우는게 안전함)
man ls (자세한 검색이 가능하다. 이 상태에서 /sort라는걸 누르면 sort라는 단어를 가진 놈들을 블락해준다. n키를 누르면 다음으로 넘어간다. man 보드 빠져나올 땐 q)
 




NAME="Amazon Linux" (배포판 이름)
VERSION="2023" (버전)등 나온다

uname -a (커널 및 시스템 정보를 표시하며 주로 커널 버전을 확인하는데 사용된다.)
macOS uname = Darwin, linux uname = Linux


명령어를 작성하여 돌아온 결과값을 보고 있는건, 각 쉘을 통해 커널로 전달되고 있는 커널에서 만들어진 결과가 표시되고 있는 것이다.

zsh는 Cd + tab 한번만 눌러도 파일표시 숨김파일 X
Bash는 두번 눌렀을 때 숨김파일까지 표시함.
zsh가 더 편리함.

[linux]
nano my_python_script.py
파이썬 파일을 생성함.
nano 편집기에서 print("Hello, Linux!")를 작성 후 ctrl+x 눌러 저장 여부를 묻고 Y를 눌러 저장하고, Enter을 눌러 종료한다.
명령 줄에서 직접 파일을 생성할 수 있음. echo 'print("Hello, Linux!")'k > my_python_script.py 이렇게 하면 됨.
이후 python my_python_script.py 이렇게 터미널에서 실행하면 됨.
만약 파이썬3를 사용한다면 python my_python_script.py를 작성하면 됨.



[macOs]
vi example.sh 
쉘 파일 생성함.

i 를 입력하여 쉘 파일을 수정하고, 다 입력한 후 저장은 esc버튼 + :wq를 누르면 저장됨.
shell script를 편집하기 위해서는 다음과 같이 입력 해야 한다고 함.
#!/bin/bash (bash 명령어를 입력할 것이라 지시)
echo “hello world” (hello world를 출력)
sh example.sh (실행하면 hello world를 출력함.)
mkdir abc (해당 위치에 abc 디렉토리를 생성함.)
ls를 하면 abc 표시됨.
이외에 반복문, 파일압축하기 등 다양한 작업이 가능하므로
shell script를 활용하여 작업 자동화를 해보는 것이 좋을 것임.

- 쉘 vs Kernel

쉘(Shell) : 껍데기,주변(사용자가 치는 명령어. 쉘은 커널이 이해할 수 있는 언어로 변경하여 커널로 전달함.)
커널(Kernel) : 알맹이,핵심,코어(OS 관련하여서 커널은 하드웨어를 제어함. 쉘에서 받은 명령어를 컴퓨터가 잘 이해할 수 있게 번역을 해서 하드웨어에 전달하는 역할을 함. 그리고 그 제어에 대한 결과를 보여주는 역할도 함.)










.pem 파일은 주로 개인 키(private key)와 공개 키(public key)를 포함하는 X.509 디지털 인증서 파일 형식 중 하나입니다. 이 파일 형식은 주로 암호화와 인증을 위해 사용되며, TLS/SSL 연결에서 서버 및 클라이언트 간의 인증에 활용됩니다.
.pem은 Privacy Enhanced Mail의 약자로, 처음에는 이메일 보안을 위해 개발되었습니다. 그러나 현재는 주로 암호화와 보안과 관련된 다양한 용도로 사용됩니다.
주로 .pem 파일에는 다음과 같은 내용이 포함될 수 있습니다:
개인 키 (Private Key): 서버나 클라이언트의 개인 키를 저장합니다. 이 키는 특정 서버 또는 개인을 식별하는 데 사용되며, 서버와 클라이언트 간의 안전한 통신을 위해 필요합니다.
공개 키 (Public Key): 개인 키와 쌍을 이루는 공개 키를 포함합니다. 이 키는 서버나 개인이 제공하는 암호화된 데이터를 해독하기 위해 사용됩니다.
인증서 (Certificate): 공개 키와 해당 소유자에 대한 정보를 서명한 디지털 인증서도 .pem 파일에 저장됩니다.
CA Bundle (Certificate Authority Bundle): 일부 .pem 파일은 인증서 기관(Certificate Authority, CA)에 대한 인증서 번들을 포함할 수 있습니다.
기타 인증 관련 파일들: .pem 파일은 기타 관련된 정보나 설정들을 포함할 수 있습니다.
주로 웹 서버에서는 HTTPS 프로토콜을 사용하기 위해 SSL/TLS 인증서와 개인 키가 .pem 파일 형식으로 사용됩니다. 개인 키와 공개 키가 쌍으로 저장되어 있어 서버와 클라이언트 간의 안전한 통신을 위해 사용됩니다.



VS code 확장팩 설치한거
1. remote SSH
2. AWS CLI Configure
3. AWS Toolkit

1. SSH탭에서 SSH 연결할 호스트를 입력해놓는다.
2. Select SSH configuration file to update 에 /User/사용자/.ssh/config 를 선택한다.
3. config 파일이 열리는지 확인한다. 플러스 버튼 좌측 옆에 있는 설정 버튼을 누르면 나옴.
Host test.test.co.kr //주소 이름(띄어쓰기 금지) 변경 가능
HostName test.test.co.kr //IP/DNS 부여받은 IP를 입력
User test93 //계정 이름
Port 22 //연결할 포트 번호를 말하며, 기본 포트는 22이다.
IdentityFile ~/.ssh/testtest.pem //키 파일(.pem 확장자) 위치를 말한다.

만약 pem 파일이 ~/.ssh 자리에 없다면 이동시켜주기.
> cp -r testtest.pem ~/.ssh/
경로 이동 후, 실제 파일이 옮겨졌는지 확인한다.
> cd ~/.ssh
> ls
testtest.pem	확인!

4. vscode를 껐다가 다시킨 후, remote SSH 탭에 들어와서 추가되어 있는 ssh 연결요청의 '→'버튼을 클릭한다.
5. 가상환경이 실행되었다. 비밀번호를 치라고 alert이 떠있다면 비밀번호 입력 후 enter을 한다.
6. remote SSH 탭에서 연결되어 있는 모습을 볼 수 있고, 터미널>new 터미널을 누르면 하단에 접속되어 있는 것을 볼 수 있음.





