
이러한 요구사항을 충족하는 Visual Studio Code 확장 프로그램을 만들기 위해서는 여러가지 작업이 필요합니다. 아래는 전반적인 프로세스에 대한 개요입니다. 이 프로세스를 참고로 하여 구체적인 상황에 맞게 코드를 작성해 나가면 됩니다.

1. 초기 환경 설정:
* 		Extension 프로젝트 생성: Visual Studio Code Extension 프로젝트를 생성합니다.
* 		프로젝트 구조 정의: Extension의 파일 및 폴더 구조를 정의합니다.
2. 사용자 인터페이스(GUI) 구성:
* 		사용자 인터페이스 디자인: GUI를 위한 HTML 및 CSS 파일을 생성하고 디자인합니다.
* 		VSCode API 사용: VSCode API를 사용하여 확장의 메뉴, 버튼 등의 UI 구성 요소를 추가합니다.
* 		이벤트 핸들링: UI에서 발생하는 이벤트에 대한 핸들러를 구현합니다.
3. FTP 클라이언트 통합:
* 		FTP 클라이언트 라이브러리 추가: 선택한 FTP 클라이언트 라이브러리를 프로젝트에 추가합니다.
* 		FTP 연결 및 파일 전송 구현: FTP 클라이언트를 사용하여 선택한 서버에 파일을 전송하는 기능을 구현합니다.
4. 파일 컴파일:
* 		컴파일러 설정: 선택한 프로그래밍 언어에 맞는 컴파일러를 프로젝트에 추가합니다.
* 		컴파일 기능 구현: 사용자가 선택한 파일이나 프로젝트를 컴파일하는 기능을 추가합니다.
5. 서버 선택 및 배포:
* 		서버 목록 설정: 사용자가 배포할 서버를 등록하고 목록으로 관리할 수 있는 기능을 추가합니다.
* 		서버 선택 및 배포 기능 구현: 사용자가 선택한 서버에 파일을 배포하는 기능을 구현합니다.
6. 성능 집계 및 표시:
* 		성능 측정 코드 추가: 프로그램의 실행 시간을 측정하는 코드를 추가합니다.
* 		효율성 표시 구현: 배포 작업의 효율성을 표시하는 UI를 구현하고 측정된 성능 정보를 표시합니다.
7. 테스트 및 디버깅:
* 		단위 테스트 작성: 각 기능에 대한 단위 테스트를 작성하여 확장의 안정성을 보장합니다.
* 		디버깅 지원 추가: 사용자가 확장을 디버깅할 수 있도록 필요한 설정을 추가합니다.
8. 문서화:
* 		사용 설명서 작성: 사용자를 위한 간단하고 명확한 사용 설명서를 작성합니다.
* 		코드 주석 및 문서화: 코드 내에 주석을 추가하고, 필요에 따라 자세한 문서를 작성하여 협업을 용이하게 합니다.
참고사항:
* VSCode API 문서 확인: VSCode API 문서를 자주 확인하여 필요한 API 및 기능을 활용하세요.
* 확장 개발 템플릿 사용: VSCode에서는 확장 개발을 위한 템플릿을 제공합니다. 이를 사용하여 초기 구성을 빠르게 할 수 있습니다.
위의 단계들을 참고하여 진행하면서, 특히 FTP 클라이언트 통합과 서버 배포 관련 부분에서는 해당 언어와 프레임워크에 맞는 라이브러리 및 도구를 적절히 활용해야 합니다.




Amazon Elastic Compute Cloud(EC2)는 Amazon Web Services(AWS)의 클라우드 컴퓨팅 서비스 중 하나입니다. EC2는 가상 서버(인스턴스)를 프로비저닝하고 실행할 수 있는 확장 가능한 컴퓨팅 리소스를 제공합니다. 사용자는 EC2를 통해 필요에 따라 가상 서버를 생성하고 관리할 수 있습니다.
EC2의 주요 특징 및 기능은 다음과 같습니다

인스턴스 유형: 다양한 유형의 가상 서버(인스턴스)를 제공하며, 각 유형은 특정 리소스(인스턴스 유형, CPU, 메모리, 스토리지 등)를 갖습니다.
가상화: EC2는 가상화 기술을 사용하여 여러 사용자가 하나의 물리적 서버를 공유하면서 독립적인 환경을 제공합니다.
스케일링: 필요에 따라 인스턴스를 쉽게 확장하거나 축소할 수 있습니다. 이는 수요의 변화에 유연하게 대응할 수 있도록 합니다.
AMI(Amazon Machine Image): 인스턴스를 시작할 때 사용하는 이미지로, 운영 체제, 애플리케이션 및 구성을 포함합니다.
EBS(Elastic Block Store): 지속적인 블록 스토리지를 제공하며, EC2 인스턴스에 연결하여 데이터를 저장하고 가져올 수 있습니다.
보안 그룹 및 네트워킹: 보안 그룹을 통해 인스턴스에 대한 방화벽 규칙을 설정하고, 가상 네트워크를 통해 인스턴스 간 통신이 가능합니다.
오토 스케일링(Auto Scaling): 트래픽이나 부하에 따라 인스턴스의 수를 동적으로 조절하여 안정적인 성능을 유지합니다.
리전 및 가용 영역: AWS는 전 세계에 여러 리전과 가용 영역을 제공하며, 사용자는 원하는 지역에 인스턴스를 배치할 수 있습니다.
EC2를 사용하면 사용자는 물리적 하드웨어를 구매하거나 관리할 필요없이 클라우드에서 가상의 컴퓨팅 리소스를 쉽게 확보할 수 있습니다. 이는 유연성과 확장성을 제공하며, 서비스를 효율적으로 운영할 수 있도록 도와줍니다.


참고 블로그
https://velog.io/@makemyway-kr/Visual-Code%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-EC2%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0 

Host (호스트): 이는 원격 서버의 주소, 즉 EC2 인스턴스의 IP 주소를 나타냅니다.
Username (사용자 이름): SSH로 서버에 접속할 때 사용되는 사용자 이름입니다. 예를 들어, Ubuntu AMI의 경우 "ubuntu"가 일반적으로 사용됩니다.
Port (포트): SSH는 기본적으로 22번 포트를 사용합니다. 이는 원격 서버와 통신하는데 사용되는 포트 번호입니다.
Path (경로): 원격 서버 내에서 작업할 디렉토리의 위치를 나타냅니다. SSH로 원격 서버에 접속한 후에 작업할 위치를 설정하는데 사용됩니다.
Private Key (개인 키): SSH 접속 시 사용자를 인증하기 위한 키 파일입니다. EC2 인스턴스를 생성할 때 받은 .pem 파일이 여기에 해당합니다. 이 개인 키를 사용하여 SSH 접속 시 서버가 사용자를 식별하고 인증합니다.
이러한 용어들은 기본적으로 원격 서버에 접속하고, 서버에서 파일을 전송하거나 작업을 수행하는 등의 과정에서 사용됩니다. 이를 이해하려면 다음과 같은 주제들을 학습하는 것이 도움이 될 수 있습니다:
SSH 및 명령어 사용: SSH에 대한 기본적인 이해와 명령어 사용법을 익히세요. 원격 서버에 접속하고 파일을 전송하는 등의 작업을 수행하는 방법을 익히는 것이 중요합니다.
리눅스 기본 명령어: 리눅스 서버에서의 기본적인 명령어 사용법을 익히세요. 디렉토리 이동, 파일 복사, 파일 이동 등을 할 수 있어야 합니다.
SSH 키 및 인증: SSH 키의 생성, 관리, 사용에 대한 이해가 필요합니다. 개인 키와 공개 키를 생성하고, 서버에 공개 키를 등록하는 방법을 익히세요.
원격 서버 환경 설정: EC2 인스턴스를 생성하고, 필요한 프로그램을 설치하며, 서버의 환경을 설정하는 방법을 학습하세요.
이러한 기본적인 지식을 토대로 원격 서버에 접속하고 작업하는 경험을 쌓아나가면서, 위에서 언급한 내용들이 점점 익숙해질 것입니다. 학습에는 시간이 소요되지만, 단계적으로 익숙해지며 활용할 수 있게 될 것입니다.
